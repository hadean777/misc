-- SEQUENCES

CREATE SEQUENCE QUANT_QUERIES_SEQ
	START WITH 1 
	INCREMENT BY 1 
	NO MAXVALUE
;

CREATE SEQUENCE QUANT_USERS_SEQ
	START WITH 1 
	INCREMENT BY 1 
	NO MAXVALUE
;


-- TABLES

CREATE TABLE QUANT_QUERIES (
	QUANT_QUERY_ID	BIGINT NOT NULL DEFAULT NEXTVAL('QUANT_QUERIES_SEQ'),
	QUANT_USER_ID	BIGINT NOT NULL
	REQUEST		TEXT,
	RESPONSE	TEXT,
	SEND_TIME	BIGINT,
	RESPONSE_TIME	BIGINT,
	ADDED_TS	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_TS	TIMESTAMP
);

CREATE TABLE QUANT_USERS (
	QUANT_USER_ID	BIGINT NOT NULL DEFAULT NEXTVAL('QUANT_USERS_SEQ'),
	NAME		TEXT NOT NULL,
	EMAIL		TEXT NOT NULL,
	TOKEN		TEXT NOT NULL,
	ADDED_TS	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_TS	TIMESTAMP	
);



-- CONSTRAINTS

ALTER TABLE QUANT_QUERIES ADD CONSTRAINT PK_QUANT_QUERIES PRIMARY KEY (QUANT_QUERY_ID)
;
ALTER TABLE QUANT_USERS ADD CONSTRAINT PK_QUANT_USERS PRIMARY KEY (QUANT_USER_ID)
;

ALTER TABLE POSTS ADD CONSTRAINT FK_POSTS_THREADS
    FOREIGN KEY ( THREAD_UID ) REFERENCES THREADS ( THREAD_UID )
;

-- TRIGGERS

CREATE OR REPLACE FUNCTION UPDATE_PROC() RETURNS TRIGGER AS $BODY$
    BEGIN
	IF (TG_OP = 'UPDATE') THEN
	      SELECT CURRENT_TIMESTAMP INTO NEW.MODIFIED_TS;
	END IF;
RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql;


CREATE TRIGGER POSTS_UPD_TRG
 BEFORE UPDATE ON POSTS
 FOR EACH ROW EXECUTE PROCEDURE UPDATE_PROC();

CREATE TRIGGER THREADS_UPD_TRG
 BEFORE UPDATE ON THREADS
 FOR EACH ROW EXECUTE PROCEDURE UPDATE_PROC();


-- INDEXES

CREATE INDEX IX_FK_POSTS_THREADS ON POSTS ( THREAD_UID )
;
